{"version":3,"sources":["app.js","nav/main-nav-controller.js","new-task/new-task-controller.js","new-task/task.js","services/tasks-service.js","services/user-services.js","tasks/ellipsis.js","tasks/tasks-controller.js","user/login-controller.js","user/user.controller.js","user/user.js","utils/string-util.js","errors/404/error-404-controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', 'userService', function($location, StringUtil, userService) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n\n    self.logOutUser = function () {\n      userService.logOutUser().then(self.goToLogIn);\n    };\n\n    self.goToLogIn = function () {\n      $location.path('/login');\n    };\n  }]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/new-task/new-task.html',\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/tasks/new', routeDefinition);\n}])\n.controller('NewTaskCtrl', ['$location', 'Task', 'tasksService', function ($location, Task, tasksService) {\n  var self = this;\n  self.task = Task();\n  self.user = \n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n  };\n\n  self.addTask = function () {\n    tasksService.addTask(self.task).then(self.goToTasks);\n  };\n\n}]);\n","app.factory('Task', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      title: spec.title || '',\n      description: spec.description || '',\n      due_date: spec.due_date || ''\n    };\n  };\n});\n","app.factory('tasksService', ['$http', '$log', function($http, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, task));\n  }\n\n  function put(url, task) {\n    return processAjaxPromise($http.put(url, task));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      var data = result.data;\n      return data.data;\n    })\n    .catch(function (error) {\n     $log.log(error);\n     throw error;\n    });\n  }\n\n  return {\n      getTasks: function () {\n      return get('/api/tasks');\n      },\n\n      getTask: function (id) {\n      return get('/api/task' + id);\n      },\n\n      addTask: function (task) {\n      return post('/api/tasks', task);\n    },\n\n      removeTask: function (id) {\n      return remove('/api/task/' + id);\n    },\n\n      updateTask: function (id, task) {\n      return put('/api/task/' + id, task);\n    }\n  };\n}]);\n","app.factory('userService', ['$http', '$log', function($http, $log) {\n\n  //currentUser will hold the returned logged in user object\n  var currentUser = {};\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, task));\n  }\n\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      var data = result.data;\n      return data.data;\n    })\n    .catch(function (error) {\n     $log.log(error);\n     throw error;\n    });\n  }\n\n  return {\n      createUser: function (user) {\n\n      return post('/api/users', user);\n      },\n\n      setCurrentUser: function(user) {\n        currentUser = user;\n      },\n\n      getCurrentUser: function() {\n        return currentUser;\n      },\n\n\n      logOutUser: function () {\n      return post('/api/logout');\n      },\n\n      logInUser: function (user) {\n      return post('/api/login', user);\n    },\n\n  };\n}]);\n","//making a filter\n//$filter('filter') (array, expression, comparator)\napp.filter('ellipsis', function(){\n  return function (input, num) {\n    if(input.length > num ) {\n      var newInputArea = input.slice(0, num) + '...';\n      return newInputArea;\n    } else {\n      return input;\n    }\n};\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/tasks.html',\n    controller: 'TasksCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['tasksService', function (tasksService){\n        return tasksService.getTasks();\n      }],\n      currentUser: ['userService', function(userService){\n        return userService.getCurrentUser();\n      }]\n      }\n  };\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/tasks', routeDefinition);\n}])\n.controller('TasksCtrl', ['$location', 'tasks', 'tasksService', 'currentUser', function ($location, tasks, tasksService, currentUser) {\n\n  var self = this;\n\n  self.tasks = tasks;\n\n  self.currentUser = currentUser;\n\n  self.removeTask = function (id) {\n    tasksService.removeTask(id).then(function () {\n    for (var i =0; i < self.tasks.length; ++i) {\n      if (self.tasks[i].id === id) {\n      self.tasks.splice(i, 1);\n      break;\n      }\n    }).catch(function () {\n      alert('failed to delete');\n    });\n  }\n};\n\n    self.updateTask = function (task, tabStatus) {\n      task.status = tabStatus;\n      tasksService.updateTask(task.id, task);\n    };\n\n    self.className = function (task) {\n      var className = 'task-title';\n\n      if (task.status === 'new') {\n        className += ' todo';\n      }\n      else if (task.status === 'doing') {\n        className += ' doing';\n      }\n      else {\n        className += ' done';\n      }\n      return className;\n    };\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/user/login.html',\n    controller: 'LogInCtrl',\n    controllerAs: 'vm'\n    // resolve: {\n    //   tasks: ['userService', function (userService){\n    //     return userService.getUsers();\n    //   }]\n    //   }\n  };\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/login', routeDefinition);\n}])\n.controller('LogInCtrl', ['$location', 'User', 'userService', function ($location, User, userService) {\n\n  var self = this;\n\n  self.error = null;\n\n  self.user = User();\n\n  // tasks.status = \"new\";\n\n  self.logInUser = function () {\n     userService.logInUser(self.user).then(function(success){\n       \n     if (success) {\n       userService.setCurrentUser(success);\n       self.goToTasks();\n     }\n\n    }, function(error){\n      self.error = error;\n    });\n  };\n\n  self.goToTasks = function () {\n    $location.path('/tasks');\n    };\n\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/user/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm'\n    // resolve: {\n    //   tasks: ['userService', function (userService){\n    //     return userService.getUsers();\n    //   }]\n    //   }\n  };\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UserCtrl', ['$location', 'User', 'userService', function ($location, User, userService) {\n\n  var self = this;\n  self.user = User();\n  // tasks.status = \"new\";\n\n  self.createUser = function () {\n    userService.createUser(self.user);\n    };\n\n\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      name: spec.name,\n      email: spec.email,\n      password: spec.password\n    };\n  };\n});\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n"],"sourceRoot":"/source/"}